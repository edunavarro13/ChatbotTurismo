apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "es.ua.eduardo.duack"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    //Add Library
    compile 'com.github.lguipeng:BubbleView:1.0.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.android.support:design:26.1.0'

    // to interact with the Conversation service using any Android networking library, using the Watson Java SDK is a better idea because it offers a very intuitive and high-level API
    compile 'com.ibm.watson.developer_cloud:java-sdk:3.7.2'
    //  we'll be needing the Fuel networking library to fetch inspirational quotes from a remote server, and the Design support library to able to work with a few Material Design widgets.
    // compile 'com.android.support:design:23.4.0'
    compile 'com.github.kittinunf.fuel:fuel-android:1.9.0'

    compile 'com.ibm.watson.developer_cloud:conversation:3.8.0'
    compile 'com.ibm.watson.developer_cloud:text-to-speech:3.8.0'
    compile 'com.ibm.watson.developer_cloud:android-sdk:0.4.2'
    compile('com.ibm.watson.developer_cloud:speech-to-text:3.8.1-SNAPSHOT')
}
